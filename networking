#Understanding networking in smart way:
[Warnings: At the moment this particular note sucks at many level. Don't rely infromation on this note.]

1. Look at first octet of ip address to determine which class:

	0   - 127	==> Class A
	128 - 191	==> Class B
	192 - 223	==> Class C

But if question mention/give you subnet mask, use this logic:

	upto /8		below	 /16 ----> class A
	upto /16	below	 /24 ----> class B
	upto /24	below	 /32 ----> class C

1.1 Effect of cidr on calculation of ip address:

	1.2.3.4		/8	------>> if subnetted, we get ip address from	1.0.0.0		to	1.255.255.255
	1.2.3.4		/16	------>> if subnetted, we get ip address from	1.2.0.0		to	1.2.255.255
	1.2.3.4		/24	------>> if subnetted, we get ip address from	1.2.3.0		to	1.2.3.255

[Note: CIDR denotes how many bits are reserved for the network (aka, network bits). The remaining bits can be used for host (aka, host bits).]

===========================================================================================================================

2. Commandline tools

ipcalc <ip-address>/<cidr>
ipcalc <ip-address> <subnet-mask>

subnetcalc <ip-address>/<cidr>
subnetcalc <ip-address> <subnet-mask>

[for more command sample: curl cht.sh/<command>]

========================================================================================================

3. Find MAC address of device connected in same network

sudo nmap -sn <IP>
or
sudo nmap -sn <IP>/CIDR

[Helpful to know whether the IP address given to particular device is working properly or not.]

4. Know your public IP using curl

curl ip.gs		//Awesome :-D

[Works like charm. Simple trick.]

5. Ping tricks

ping 10.1	-->>	ping 10.0.0.1
ping 192.168.1	-->>	ping 192.168.0.1

[Works in Windows, haven't been tested in Linux.]

6. Fastest scanner, as they say:

masscan

[cool tool. Learn more about it.]

7. Transfer file from 1 computer to another:

From source device:
			cat <file> | netcat <ip> <port> -q 0		Ex: cat config.file | netcat 192.168.1.2 1234 -q 0

From reciever device:
			netcat -l <port> > <file>			Ex: netcat -l 1234 > config.file

[ "-q 0" closes the connection when file transfer is complete.]
[ netcat = nc ]

8. Configure Putty for Console Cable to connect Switch:

Step 1:
ls /dev/ttyUSB*			// Write the path in "Serial Line" option in Putty

Step 2:
	Configure speeed	// Usually: 115200

[ Example: if output is "/dev/ttyUSB0", then copy the path and write that in Putty's Serial Line input box.]

9. Update switch image using weak/cautious TFTP protocol.	// Tested in Fedora 40

#Step 1 : Install tftp packages
	sudo dnf install tftd-server
	sudo dnf install tftp

#Step 2 : Enable service
	sudo systemctl enable --now tftp
	sudo systemctl daemon-reload		// Optional

#Step 3 : Allow tftp protocol from Firewall
	sudo firewall-cmd --add-service=tftp

#Step 4 : Put image in particular location
	mv switch-Img.tar.gz /var/lib/tftpboot

#Step 5 : Allow permission to folder
	chmod 777 /var/lib/tftpboot		// Optional

#Step 4 : Download zipped image in Client (Switch) from Server (Computer)
	download agent tftp://<server-ip>/filename				// Tested in cnMatrix switch
	boot									// Type : "y" to boot

#Step 5 : After successful transfer, remove tftp from Firewall
	sudo firewall-cmd --remove-service=tftp		// Optional, but important since tftp can be misused

[Still blocked? Then try "sudo setenforce 1" to temporarily disable SELinux and renable using "sudo setenforce 0"]

10.	Who is accessing your Linux system via SSH? 
	Who is trying to but failing to access your system via SSH? 
	If someone cannot access the system via SSH, why is that?
ans:
	sudo journalctl -u ssh

[Not tested yet. Looks cool though.]

11.
