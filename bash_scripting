0. Write comment inside bash script

#This is comment written by Mr. Pranav.

1. Print 'hello world'

#!/bin/bash
echo "hello world"


`````````````````````
2. Use time delay to print

#!/bin/bash

echo "Hi, Pranav, how are you?"
sleep 1
echo "I'm good. What about you?"


`````````````````````````````````````````````````
3. Use variable to print something

#!/bin/bash

name="Pranav"
echo "Hello $name"
 
[Don't leave blank space while defining a varabile. It will throw an error or warnings.]

``````````````````````````````````````````````````
4. Take user input

#!/bin/bash

echo "What is your name?"
read name
echo "Hi, $name"


````````````````````````````````````````````````````
5. Example of postitional prameter

#!/bin/bash

name=$1
place=$2

echo "What is your name?"
sleep 1
echo "My name is $name."

sleep 2

echo "Where you from?"
sleep 1
echo "I'm from $place"

sleep 2

echo "So $name, you came all the way from $place looking for job. Am I right?"
sleep 1
echo "yes"

[Run this file like: ./scriptname.sh pranav parasi]
[We are using position of parameter to call it. $1 denote the first position and so on.]
[Note: Script can run regardless of providing parameter. In such case, it will print empty space.]


```````````````````````````````````````````````````````````````````````````````````````````````````

6. How to run Linux command inside bash script? (tips: using variables)

#!/bin/bash
echo "What time and date today is?"
time=$(date)
sleep 1

echo "Today is $time"

sleep 2

echo "Which shell do you mostly use in linux?"
shell=$(which $SHELL)
sleep 1
echo "I use $shell in linux."

[here, linux commands written are inside parenthesis]

```````````````````````````````````````````````````````````````

7. How to change user-defined variable to system variable?

Windows="Bill Gates"		//create user defined variable
$Windows			//will print variable value
export Windows			//will convert user-defined variable to system variable

[There are two types of environment variables: i. System Environment Variable	ii. User Environment Variable]

```````````````````````````````````````````````````````````````````````````````````````````````````````````````

8. How to make user-defined system variable permanent so that it doesn't disapper after reboot/shutdown)?

nano .bashrc
export Windows="Bill Gates"

[Save the bashrc file. Now the system variable will be available ready to use anytime.]

```````````````````````````````````````````````````````````````````````````````````````

9. How to do simple math calculation?

echo $((2+2))		//ans: 4
echo $((4/2))		//ans: 2
echo $((3*3))		//ans: 9
echo $((7%3))		//ans: 1	//prints out remainder after division of 7 by 3

[Double parenthesis in mandatory after dollar sign. Bash by default, doesn't print floating no.]

````````````````````````````````````````````````````````````````````````````````````````````````

10. How to print random number?

echo $RANDOM		//print random number
echo $(($RANDOM%4))	//print randomly from 0 to 3; excluding 4.

```````````````````````````````````````````````````````````````````  

11. How to write if-else loop?

#!/bin/bash

echo "Hey, do you like this repository? (yes/no)"
read reply
if [[ $reply == "yes" ]]; then
	echo "hire me"
else
	echo "What else can I do to improve my skill?"
fi

[The word "fi" is used to close the program. All the white spaces which you see in if statement is mandatory.]

```````````````````````````````````````````````````````````````````````````````````````````````````````````````

12. Why we need exit numbers?!





`````````````````````````````````````````````````````````````````````````````````````````````````````````````````
13. Tricks of semicolon. Multiple command inside 1 command.

echo what is your name?; echo my name is bond, james bond

[Don't use single or double quotion marks. Like: echo what's your name?]

````````````````````````````````````````````````````````````````````````

14. What is the difference is ; and && in bash script?

 ;	-----> will run all command, regardless of previous command failure
&&	-----> will only run only when previous command works properly

Example:

cat GitHub/Linux-101/bash_scripting ; echo "This is how I learn bash."		// works fine because do we have 'bash_scripting' file
cat GitHub/Linux-101/python_scripting ; echo "This is how I learn python"	// throws an error in first command but still runs fine
cat GitHub/Linux-101/bash_scripting && echo "This is how I learn bash."		// works fine like the first command
cat GitHub/Linux-101/python_scripting && echo "This is how I learn python"	// program will halt since python_scripting don't exist

[So its a good idea to prefer "&&" over semicolon.]
```````````````````````````````````````````````````````````````````````````

15. What is the difference in && and || in bash script?

 &&	--------> will only run if previous command run properly
 ||	--------> will only run if previous command faild.

Example:

cat GitHub/Linux-101/bash_scripting || echo "This command doesn't run."		//Since we do have file named bash_scripting, second command won't be executed.
cat GitHub/Linux-101/python_scripting || echo "This file doesn't exit."		//The first command fails because there is no file named python_scripting. So second command is executed.

````````````````````````````````````````````````````````````````````````

16. Usage of Nested Loops, Or condition in loops. 

#!/bin/bash
echo "What is your age?"
read age

#here, saying "adult" acts as an cheetsheet for teenagers. -gt means greater than
if [[ $age -gt 17 || $age == "adult" ]]; then
    echo "Welcome to club!"

#If condition of previus if-statement is not satisfied, the nested loop written below is used.
elif [[ $USER == "pranav" ]]; then
    echo "You are the VIP member of this club. Welcome sir."

else
    echo "Sorry, you are not mature enough to join the club."
fi

````````````````````````````````````````````````````````````````

17. While loops to print mantra 5 times

#!/bin/bash
x=1
while [[ $x -le 5 ]]
do
    echo "1) OM Namah Shiwaya"
done

```````````````````````````````````````````

18. Using while loop asking for your user input.

#A program which ask all question of exam are solved or not

x=1
while [[ $x -le 15 ]]
do
    read -p "Have you solved question $x?"
    (( x ++ ))
done
echo "Congratulation, I think you will pass the exam"
