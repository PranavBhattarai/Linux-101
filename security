#Started from July 29, 2022. I realized maintaining secuity is REALLY important even though Linux default state is quite secure.

1. Make sure "Secure Boot" is enabled in BIOS.

	sudo mokutil --sb-state
OR,
	dmesg | grep secure

[both command will tell whether SecureBoot is enabled or disable. Enable it if its not already.]

------------------------------------------------------------------------------------------------------

2. In Windows, if you open doubtful or unknown document:

-> Never enable "Macros" if the document ask.
-> Disable Macros functionality if its enabled.

[Macros can contain scripts that can damage the OS security.]
[This primarly affects MS Word, PowerPoint, Excel, etc.]

------------------------------------------------------------------------------------------------------

3. In Windows, application shortcuts can be dangerous because:

-> Windows by default hide file extension.
-> Executable script/program icons can be changed to make it look like a picture or video to confuse.
-> Know what/which application/software/script is asking for administrative permission.

[Always check file type before running them]

-------------------------------------------------------------------------------------------------------

4. Know which port are open. Close the port and identify suspicious program.

netstat -tunlp			//to see all open port
ps -o pid=<pid_number>		//to see parant id

--------------------------------------------------------------------------------------------------------

5. List out all running process in Tree format. Easier to spot unusally activity:

ps -auxwf

----------------------------------------------------------------------------------------------------

6. After Crowdsrike incident, this can happen too to any Linux distro, so:

https://systemd.io/AUTOMATIC_BOOT_ASSESSMENT/		// Works in Linux distro only.

[Automatic Boot Assessment (ABA) counts the failed attempts of boot; and revert back to old kernel/system.]

-----------------------------------------------------------------------------------------------------------

7. Block known malicious IP, by putting its traffic into null routes

 ~ To apply:

	route add <bad-ip> gw 127.0.0.1 lo		// routing the traffic coming from bad ip into loopback address
or
	route add -host <bad-ip> reject
or
	ip route add blackhole <ip>/cidr		// BEST command. No ICMP will be sent. No packet will be forwarded.

 ~ To verify:
	
	ip route get <bad-ip>				// Output: "RTNETLINK answers: Network is unreachable"

 ~ To block entire subnet:
	
	route add -net <network-ID/cidr> gw 127.0.0.1 lo

 ~ To undo blocking:
	
	route delete <ip>
	route delete -host <ip> reject
	ip route delete <ip>/cidr dev eth0

[For advance blocking, use bash script. For persistent blocking, add commands to /etc/rc.local file. Learn, "fail2ban".]
